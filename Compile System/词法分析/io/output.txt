unsigned <UNSIGNED,_>
a <ID,a>
= <ASG,_>
12 <CONST,12>
; <SEMI,_>
int <INT,_>
b <ID,b>
, <COMMA,_>
c <ID,c>
= <ASG,_>
07 <OCTAL,07>
, <COMMA,_>
0x1f <DEX,0x1f>
; <SEMI,_>
float <FLOAT,_>
d <ID,d>
, <COMMA,_>
e <ID,e>
= <ASG,_>
1.5e-32 <SCINO,1.5e-32>
float <FLOAT,_>
_d1 <ID,_d1>
, <COMMA,_>
_d2 <ID,_d2>
= <ASG,_>
0.65 <REAL,0.65>
, <COMMA,_>
100.779 <REAL,100.779>
; <SEMI,_>
char <CHAR,_>
f <ID,f>
= <ASG,_>
'1' <CHAR_CONST,'1'>
; <SEMI,_>
char <CHAR,_>
r <ID,r>
[ <LEFT_INDEX,_>
] <RIGHT_INDEX,_>
= <ASG,_>
"This is a string test." <STR_CONST,"This is a string test.">
; <SEMI,_>
_a1 <ID,_a1>
= <ASG,_>
_a2 <ID,_a2>
% <MOD,_>
_a1 <ID,_a1>
* <MUL,_>
( <LEFT_PER,_>
30 <CONST,30>
) <RIGHT_PER,_>
/ <DIV,_>
( <LEFT_PER,_>
2 <CONST,2>
^ <BYTE_XOR,_>
5 <CONST,5>
) <RIGHT_PER,_>
; <SEMI,_>
_a1 <ID,_a1>
++ <SELF_ADD,_>
; <SEMI,_>
_a2 <ID,_a2>
-- <SELF_SUB,_>
; <SEMI,_>
t <ID,t>
, <COMMA,_>
u <ID,u>
, <COMMA,_>
t <ID,t>
= <ASG,_>
a <ID,a>
> <GRT_THAN,_>
b <ID,b>
, <COMMA,_>
a <ID,a>
<= <LES_EQUAL,_>
b <ID,b>
, <COMMA,_>
a <ID,a>
!= <NOT_EQUAL,_>
b <ID,b>
; <SEMI,_>
t <ID,t>
, <COMMA,_>
u <ID,u>
, <COMMA,_>
t <ID,t>
= <ASG,_>
t <ID,t>
&& <AND,_>
u <ID,u>
, <COMMA,_>
t <ID,t>
|| <OR,_>
u <ID,u>
, <COMMA,_>
! <NOT,_>
t <ID,t>
a <ID,a>
| <BYTE_OR,_>
b <ID,b>
, <COMMA,_>
a <ID,a>
& <BYTE_AND,_>
b <ID,b>
char <CHAR,_>
a <ID,a>
[ <LEFT_INDEX,_>
3 <CONST,3>
] <RIGHT_INDEX,_>
= <ASG,_>
[ <LEFT_INDEX,_>
0 <CONST,0>
, <COMMA,_>
1 <CONST,1>
, <COMMA,_>
2 <CONST,2>
] <RIGHT_INDEX,_>
; <SEMI,_>
int <INT,_>
my_function <FUNCTION,my_function>
( <LEFT_PER,_>
int <INT,_>
a <ID,a>
, <COMMA,_>
int <INT,_>
b <ID,b>
) <RIGHT_PER,_>
{ <LEFT_BOUNDER,_>
a <ID,a>
= <ASG,_>
b <ID,b>
+ <ADD,_>
1 <CONST,1>
; <SEMI,_>
} <RINGHT_BOUNDER,_>
struct <STRUCT,_>
student <ID,student>
{ <LEFT_BOUNDER,_>
int <INT,_>
age <ID,age>
= <ASG,_>
0 <CONST,0>
; <SEMI,_>
double <DOUBLE,_>
height <ID,height>
= <ASG,_>
100.0 <REAL,100.0>
; <SEMI,_>
long <LONG,_>
weight <ID,weight>
= <ASG,_>
50 <CONST,50>
; <SEMI,_>
} <RINGHT_BOUNDER,_>
my_function <FUNCTION,my_function>
( <LEFT_PER,_>
1 <CONST,1>
, <COMMA,_>
2 <CONST,2>
) <RIGHT_PER,_>
if <IF,_>
( <LEFT_PER,_>
a <ID,a>
> <GRT_THAN,_>
b <ID,b>
) <RIGHT_PER,_>
{ <LEFT_BOUNDER,_>
do <DO,_>
{ <LEFT_BOUNDER,_>
x <ID,x>
= <ASG,_>
2 <CONST,2>
; <SEMI,_>
} <RINGHT_BOUNDER,_>
while <WHILE,_>
( <LEFT_PER,_>
1 <CONST,1>
> <GRT_THAN,_>
2 <CONST,2>
) <RIGHT_PER,_>
; <SEMI,_>
} <RINGHT_BOUNDER,_>
else <ELSE,_>
{ <LEFT_BOUNDER,_>
switch <SWITCH,_>
a <ID,a>
: <COLON,_>
{ <LEFT_BOUNDER,_>
case <CASE,_>
1 <CONST,1>
: <COLON,_>
break <BREAK,_>
; <SEMI,_>
} <RINGHT_BOUNDER,_>
} <RINGHT_BOUNDER,_>
/* <×¢ÊÍ¿ªÊ¼,_>
*/ <×¢ÊÍ½áÊø,_>
int <INT,_>
a@ <line:42 ID_Error,_>
= <ASG,_>
1 <CONST,1>
; <SEMI,_>
int <INT,_>
b <ID,b>
= <ASG,_>
08 <line:43 Octal_Error,_>
; <SEMI,_>
int <INT,_>
c <ID,c>
= <ASG,_>
0xKZ <line:44 Dex_Error,_>
